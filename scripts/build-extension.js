import fs from 'fs-extra'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

async function buildExtension() {
  const distDir = path.join(__dirname, '../dist')
  const publicDir = path.join(__dirname, '../public')
  
  console.log('Building Chrome Extension...')
  
  // 确保dist目录存在
  await fs.ensureDir(distDir)
  
  // 复制manifest.json
  const manifestSrc = path.join(publicDir, 'manifest.json')
  const manifestDest = path.join(distDir, 'manifest.json')
  await fs.copy(manifestSrc, manifestDest)
  console.log('✓ Copied manifest.json')
  
  // 复制图标文件
  const iconsSrc = path.join(publicDir, 'icons')
  const iconsDest = path.join(distDir, 'icons')
  if (await fs.pathExists(iconsSrc)) {
    await fs.copy(iconsSrc, iconsDest, {
      filter: (src, _dest) => {
        // 只复制 PNG 文件，跳过其他文件
        if (src.endsWith('.png')) return true
        if (fs.statSync(src).isDirectory()) return true
        return false
      }
    })
    console.log('✓ Copied icon PNG files')

    // 检查是否存在所需的图标文件
    const requiredIcons = ['icon16.png', 'icon32.png', 'icon48.png', 'icon128.png']
    const missingIcons = []

    for (const iconFile of requiredIcons) {
      const iconPath = path.join(iconsDest, iconFile)
      if (!await fs.pathExists(iconPath)) {
        missingIcons.push(iconFile)
      }
    }

    if (missingIcons.length > 0) {
      console.warn(`⚠️  Missing icon files: ${missingIcons.join(', ')}`)
      console.warn('   Please convert the SVG icons to PNG using the conversion tool')
    }
  }
  
  // 使用Vite构建的src/popup/index.html
  const popupHtmlSrc = path.join(distDir, 'src', 'popup', 'index.html')
  const popupHtmlDest = path.join(distDir, 'popup.html')

  if (await fs.pathExists(popupHtmlSrc)) {
    // 读取HTML内容并修复路径
    let htmlContent = await fs.readFile(popupHtmlSrc, 'utf8')
    // 将绝对路径转换为相对路径
    htmlContent = htmlContent.replace(/src="\/([^"]+)"/g, 'src="$1"')
    htmlContent = htmlContent.replace(/href="\/([^"]+)"/g, 'href="$1"')
    // 修复下划线开头的文件名引用（包括 modulepreload 链接）
    htmlContent = htmlContent.replace(/_plugin-vue_export-helper\.js/g, 'plugin-vue-export-helper.js')
    // 写入修复后的内容
    await fs.writeFile(popupHtmlDest, htmlContent)
    console.log('✓ Moved and fixed popup/index.html to popup.html')
  } else {
    console.error('Error: src/popup/index.html not found in dist directory')
    process.exit(1)
  }

  // 修复下划线开头的文件名（Chrome 扩展不允许）
  await fixUnderscoreFiles(distDir)
  
  // content.css 已经由 Vite 构建生成，无需额外复制
  console.log('✓ content.css already generated by Vite')
  
  // 清理不需要的文件和目录
  const unnecessaryDirs = [
    path.join(distDir, 'src')
  ]

  for (const dir of unnecessaryDirs) {
    if (await fs.pathExists(dir)) {
      try {
        await fs.remove(dir)
        console.log(`✓ Cleaned up ${dir}`)
      } catch (error) {
        console.warn(`Failed to clean up ${dir}:`, error.message)
      }
    }
  }
  
  console.log('\n🎉 Extension build completed!')
  console.log('\nGenerated files:')
  console.log('├── manifest.json')
  console.log('├── popup.html')
  console.log('├── popup.js')
  console.log('├── popup.css')
  console.log('├── content.js')
  console.log('├── content.css')
  console.log('├── background.js')
  console.log('└── icons/')
  console.log('    ├── icon16.png')
  console.log('    ├── icon32.png')
  console.log('    ├── icon48.png')
  console.log('    └── icon128.png')
  console.log('\n📦 Ready to load in Chrome Extensions!')
  console.log('1. Open chrome://extensions/')
  console.log('2. Enable "Developer mode"')
  console.log('3. Click "Load unpacked"')
  console.log('4. Select the "dist" folder')
}

// 修复下划线开头的文件名
async function fixUnderscoreFiles(distDir) {
  const files = await fs.readdir(distDir)
  const underscoreFiles = files.filter(file => file.startsWith('_') && file.endsWith('.js'))

  if (underscoreFiles.length === 0) {
    console.log('✓ No underscore files to fix')
    return
  }

  for (const file of underscoreFiles) {
    const oldPath = path.join(distDir, file)
    const newName = file.substring(1) // 移除开头的下划线
    const newPath = path.join(distDir, newName)

    await fs.move(oldPath, newPath, { overwrite: true })
    console.log(`✓ Renamed ${file} to ${newName}`)

    // 更新所有文件中的引用
    await updateFileReferences(distDir, file, newName)
  }
}

// 更新文件引用
async function updateFileReferences(distDir, oldName, newName) {
  const filesToUpdate = ['popup.html', 'popup.js', 'content.js', 'background.js']

  for (const fileName of filesToUpdate) {
    const filePath = path.join(distDir, fileName)
    if (await fs.pathExists(filePath)) {
      let content = await fs.readFile(filePath, 'utf8')
      const updated = content.replace(new RegExp(oldName, 'g'), newName)

      if (content !== updated) {
        await fs.writeFile(filePath, updated)
        console.log(`  ✓ Updated references in ${fileName}`)
      }
    }
  }
}

buildExtension().catch(console.error)
